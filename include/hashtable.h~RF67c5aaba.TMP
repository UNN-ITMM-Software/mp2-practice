#pragma once
#include "table.h"
#include "linelist.h"

template <class type>
class hashtable :public table <type> {
protected:
	List<type>** htab;
	int hashf(const string k);
public:
	hashtable(int sizeT) { maxsize = sizeT; size = 0; ind = 0; htab = new List<type>*[maxsize]; for (int i = 0; i < maxsize; i++) htab[i] = new List<type>; }
	~hashtable() { for (int i = 0; i < maxsize; i++) delete htab[i]; delete[] htab; }
	type Search(const string k) override;
	void Insert(const string k, const type& d) override;
};

template <class type> int hashtable<type>::hashf(const string k) {
	int res = 0;
	for (int i = 0; i < k.length(); i++)
		res += int(k[i]);
	res %= maxsize;
	return res;
}

template <class type> type hashtable<type>::Search(const string k) {
	int s = hashf(k);
	line<type>* el = htab[s]->Search(line(k, NULL));
	if (el != NULL)
		return *(el->data);
	else 
		throw "not found";
}

template <class type> void hashtable<type>::Insert(const string k, const type& d) {
	int s = hashf(k);
	line<type>* el = htab[s]->Search(line(k, NULL));
	if (el == NULL)
		htab[s]->InsertToHead(line(k, d));
	else
		throw "repeated key";
}